import axios from "axios";
import AsyncStorage from "@react-native-async-storage/async-storage";
import { BASE_URL } from "@/constants/api";


// üü¢ API l·∫•y th√¥ng tin user t·ª´ token
export const fetchUserProfile = async () => {
  try {
    const token = await AsyncStorage.getItem("authToken");
    if (!token) throw new Error("Kh√¥ng t√¨m th·∫•y token");

    const response = await axios.get(`${BASE_URL}/user/getProfile`, {
      headers: { Authorization: `Bearer ${token}` },
    });

    return response.data.user;
  } catch (error: any) {
    console.error("‚ùå L·ªói l·∫•y th√¥ng tin user:", error.message);
    throw error;
  }
};

// üü¢ API c·∫≠p nh·∫≠t th√¥ng tin profile
export const updateProfile = async (userData: {
  fullName: string;
  email: string;
  phone: string;
  password?: string;
}) => {
  try {
    const token = await AsyncStorage.getItem("authToken");
    if (!token) throw new Error("Kh√¥ng t√¨m th·∫•y token");

    const response = await axios.put(`${BASE_URL}/user/updateProfile`, userData, {
      headers: { Authorization: `Bearer ${token}` },
    });

    return response.data;
  } catch (error: any) {
    console.error("‚ùå L·ªói c·∫≠p nh·∫≠t h·ªì s∆°:", error.message);
    throw error;
  }
};


// üü¢ API c·∫≠p nh·∫≠t avatar
export const uploadAvatar = async (formData: FormData) => {
  try {
    const token = await AsyncStorage.getItem("authToken");
    if (!token) throw new Error("Kh√¥ng t√¨m th·∫•y token");

    const response = await axios.post(`${BASE_URL}/user/uploadAvatar`, formData, {
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "multipart/form-data",
      },
    });

    return response.data;
  } catch (error: any) {
    console.error("‚ùå L·ªói upload avatar:", error.message);
    throw error;
  }
};

// üü¢ API c·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi
export const updatePassword = async (passwordData: {
  oldPassword: string;
  newPassword: string;
}) => {
  try {
    const token = await AsyncStorage.getItem("authToken");
    if (!token) throw new Error("Kh√¥ng t√¨m th·∫•y token");

    const response = await axios.put(`${BASE_URL}/user/updatePassword`, passwordData, {
      headers: { Authorization: `Bearer ${token}` },
    });

    return response.data;
  } catch (error: any) {
    console.error("‚ùå L·ªói ƒë·ªïi m·∫≠t kh·∫©u:", error.message);
    throw error;
  }
};

// üü¢ API y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u (g·ª≠i OTP qua email)
export const requestPasswordReset = async (emailOrUsername: string) => {
  try {
    const response = await axios.post(`${BASE_URL}/user/forgotPassword`, {
      emailOrUsername,
    });

    return response.data;
  } catch (error: any) {
    console.error("‚ùå L·ªói g·ª≠i OTP:", error.message);
    throw error;
  }
};

// üü¢ API X√°c th·ª±c OTP qu√™n m·∫≠t kh·∫©u
export const verifyPasswordResetOTP = async (email: string, otpCode: string) => {
  try {
    const response = await axios.post(`${BASE_URL}/user/verifyPassOtp`, { email, otpCode });
    return response.data;
  } catch (error: any) {
    console.error("‚ùå L·ªói x√°c th·ª±c OTP:", error.message);
    throw error;
  }
};

// üü¢ API ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u
export const resetPassword = async (email: string, newPassword: string) => {
  try {
    const response = await axios.post(`${BASE_URL}/user/resetPassword`, {
      email,
      newPassword,
    });
    return response.data;
  } catch (error: any) {
    console.error("‚ùå L·ªói ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:", error.message);
    throw error;
  }
};
// üü¢ API c·∫≠p nh·∫≠t ch·ªâ fullName
export const updateFullName = async (fullName: string) => {
  try {
    const token = await AsyncStorage.getItem("authToken");
    if (!token) throw new Error("Kh√¥ng t√¨m th·∫•y token");

    const response = await axios.put(
      `${BASE_URL}/user/updateFullName`,
      { fullName }, // Ch·ªâ g·ª≠i fullName
      {
        headers: { Authorization: `Bearer ${token}` },
      }
    );

    return response.data;
  } catch (error: any) {
    console.error("‚ùå L·ªói c·∫≠p nh·∫≠t fullName:", error.message);
    throw error;
  }
};

// üü¢ G·ª≠i y√™u c·∫ßu ƒë·ªïi s·ªë ƒëi·ªán tho·∫°i m·ªõi
export const requestChangePhone = async (idUser: number, newPhoneNumber: string) => {
  try {
    const token = await AsyncStorage.getItem("authToken");
    if (!token) throw new Error("Kh√¥ng t√¨m th·∫•y token");

    const response = await axios.post(
      `${BASE_URL}/user/requestChangePhone`, // ‚úÖ ƒê√∫ng endpoint m·ªõi
      { idUser, newPhoneNumber }, // ‚úÖ D√πng idUser
      {
        headers: { Authorization: `Bearer ${token}` },
      }
    );

    return response.data;
  } catch (error: any) {
    console.error("‚ùå L·ªói g·ª≠i OTP ƒë·ªïi s·ªë ƒëi·ªán tho·∫°i:", error.message);
    throw error;
  }
};


// üü¢ X√°c th·ª±c OTP ƒë·ªÉ ƒë·ªïi s·ªë ƒëi·ªán tho·∫°i m·ªõi
export const verifyChangePhone = async (idUser: number, otpCode: string, newPhoneNumber: string) => {
  try {
    const token = await AsyncStorage.getItem("authToken");
    if (!token) throw new Error("Kh√¥ng t√¨m th·∫•y token");

    const response = await axios.post(
      `${BASE_URL}/user/verifyChangePhone`, // ‚úÖ ƒê√∫ng endpoint m·ªõi
      { idUser, otpCode, newPhoneNumber }, // ‚úÖ D√πng idUser
      {
        headers: { Authorization: `Bearer ${token}` },
      }
    );

    return response.data;
  } catch (error: any) {
    console.error("‚ùå L·ªói x√°c th·ª±c OTP ƒë·ªïi s·ªë ƒëi·ªán tho·∫°i:", error.message);
    throw error;
  }
};
// üü¢ G·ª≠i y√™u c·∫ßu ƒë·ªïi email m·ªõi
export const requestChangeEmail = async (idUser: number, newEmail: string) => {
  try {
    const token = await AsyncStorage.getItem("authToken");
    if (!token) throw new Error("Kh√¥ng t√¨m th·∫•y token");

    const response = await axios.post(
      `${BASE_URL}/user/requestChangeEmail`,
      { idUser, newEmail },
      {
        headers: { Authorization: `Bearer ${token}` },
      }
    );

    return response.data;
  } catch (error: any) {
    console.error("‚ùå L·ªói g·ª≠i OTP ƒë·ªïi email:", error.message);
    throw error;
  }
};

// üü¢ X√°c th·ª±c OTP ƒë·ªÉ ƒë·ªïi email m·ªõi
export const verifyChangeEmail = async (idUser: number, otpCode: string, newEmail: string) => {
  try {
    const token = await AsyncStorage.getItem("authToken");
    if (!token) throw new Error("Kh√¥ng t√¨m th·∫•y token");

    const response = await axios.post(
      `${BASE_URL}/user/verifyChangeEmail`,
      { idUser, otpCode, newEmail },
      {
        headers: { Authorization: `Bearer ${token}` },
      }
    );

    return response.data;
  } catch (error: any) {
    console.error("‚ùå L·ªói x√°c th·ª±c OTP ƒë·ªïi email:", error.message);
    throw error;
  }
};